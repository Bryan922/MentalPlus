/**
 * Service de gestion des rendez-vous s√©curis√© pour MentalPlus
 * Gestion compl√®te des rendez-vous avec validation et s√©curit√©
 */

// V√©rification des d√©pendances
if (typeof supabaseClient === 'undefined') {
  console.error('‚ùå supabaseClient non trouv√©. Assurez-vous que supabase-config.js est charg√©.');
  throw new Error('Configuration Supabase manquante');
}

if (typeof authService === 'undefined') {
  console.error('‚ùå authService non trouv√©. Assurez-vous que auth-service.js est charg√©.');
  throw new Error('Service d\'authentification manquant');
}

/**
 * Service de gestion des rendez-vous
 */
class AppointmentsService {
  constructor() {
    this.isInitialized = false;
    this.availableTimeSlots = [
      '09:00', '09:30', '10:00', '10:30', '11:00', '11:30',
      '14:00', '14:30', '15:00', '15:30', '16:00', '16:30', '17:00'
    ];
    this.appointmentTypes = [
      { id: 'consultation', name: 'Consultation individuelle', duration: 60 },
      { id: 'couple', name: 'Th√©rapie de couple', duration: 90 },
      { id: 'family', name: 'Th√©rapie familiale', duration: 90 },
      { id: 'group', name: 'Th√©rapie de groupe', duration: 120 },
      { id: 'emergency', name: 'Consultation d\'urgence', duration: 45 }
    ];
    
    this.init();
  }

  /**
   * Initialisation du service
   */
  async init() {
    try {
      console.log('üìÖ Initialisation du service de rendez-vous...');
      this.isInitialized = true;
      console.log('‚úÖ Service de rendez-vous initialis√©');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'initialisation du service de rendez-vous:', error);
    }
  }

  /**
   * Cr√©er un nouveau rendez-vous
   */
  async createAppointment(appointmentData) {
    try {
      console.log('üìÖ Cr√©ation d\'un nouveau rendez-vous...');
      
      // V√©rifier l'authentification
      if (!authService.isAuthenticated()) {
        throw new Error('Vous devez √™tre connect√© pour prendre un rendez-vous');
      }
      
      // Validation des donn√©es
      const validation = this.validateAppointmentData(appointmentData);
      if (!validation.isValid) {
        throw new Error(validation.errors.join(', '));
      }
      
      // V√©rifier la disponibilit√©
      const availability = await this.checkAvailability(
        appointmentData.date,
        appointmentData.time,
        appointmentData.employee_id
      );
      
      if (!availability.available) {
        throw new Error('Ce cr√©neau n\'est pas disponible');
      }
      
      // Pr√©parer les donn√©es du rendez-vous
      const currentUser = authService.getCurrentUser();
      const userProfile = authService.getUserProfile();
      
      const appointmentRecord = {
        client_id: currentUser.id,
        employee_id: appointmentData.employee_id,
        appointment_type: appointmentData.type,
        appointment_date: appointmentData.date,
        appointment_time: appointmentData.time,
        duration_minutes: this.getAppointmentDuration(appointmentData.type),
        status: 'scheduled',
        notes: appointmentData.notes || null,
        created_at: new Date().toISOString()
      };
      
      // Ins√©rer le rendez-vous
      const { data, error } = await supabaseClient
        .from('appointments')
        .insert([appointmentRecord])
        .select(`
          *,
          client:profiles!appointments_client_id_fkey(full_name, email, phone),
          employee:profiles!appointments_employee_id_fkey(full_name, email)
        `)
        .single();
      
      if (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du rendez-vous:', error);
        throw error;
      }
      
      console.log('‚úÖ Rendez-vous cr√©√© avec succ√®s:', data.id);
      
      // Envoyer une notification (si impl√©ment√©e)
      await this.sendAppointmentNotification(data, 'created');
      
      return {
        success: true,
        data: data,
        message: 'Rendez-vous cr√©√© avec succ√®s!'
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la cr√©ation du rendez-vous:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la cr√©ation du rendez-vous'
      };
    }
  }

  /**
   * R√©cup√©rer les rendez-vous d'un client
   */
  async getClientAppointments(clientId = null) {
    try {
      console.log('üìã R√©cup√©ration des rendez-vous du client...');
      
      // Utiliser l'ID du client connect√© si non sp√©cifi√©
      const targetClientId = clientId || authService.getCurrentUser()?.id;
      
      if (!targetClientId) {
        throw new Error('ID client requis');
      }
      
      // V√©rifier les permissions
      const currentUser = authService.getCurrentUser();
      const userProfile = authService.getUserProfile();
      
      if (userProfile?.role !== 'employee' && currentUser?.id !== targetClientId) {
        throw new Error('Acc√®s non autoris√©');
      }
      
      const { data, error } = await supabaseClient
        .from('appointments')
        .select(`
          *,
          employee:profiles!appointments_employee_id_fkey(full_name, email)
        `)
        .eq('client_id', targetClientId)
        .order('appointment_date', { ascending: true })
        .order('appointment_time', { ascending: true });
      
      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des rendez-vous:', error);
        throw error;
      }
      
      console.log(`‚úÖ ${data.length} rendez-vous r√©cup√©r√©s`);
      
      return {
        success: true,
        data: data
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des rendez-vous:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration des rendez-vous'
      };
    }
  }

  /**
   * R√©cup√©rer tous les rendez-vous (pour les employ√©s)
   */
  async getAllAppointments(filters = {}) {
    try {
      console.log('üìã R√©cup√©ration de tous les rendez-vous...');
      
      // V√©rifier les permissions employ√©
      if (!authService.hasRole('employee')) {
        throw new Error('Acc√®s r√©serv√© aux employ√©s');
      }
      
      let query = supabaseClient
        .from('appointments')
        .select(`
          *,
          client:profiles!appointments_client_id_fkey(full_name, email, phone),
          employee:profiles!appointments_employee_id_fkey(full_name, email)
        `);
      
      // Appliquer les filtres
      if (filters.date) {
        query = query.eq('appointment_date', filters.date);
      }
      
      if (filters.status) {
        query = query.eq('status', filters.status);
      }
      
      if (filters.employee_id) {
        query = query.eq('employee_id', filters.employee_id);
      }
      
      if (filters.dateFrom) {
        query = query.gte('appointment_date', filters.dateFrom);
      }
      
      if (filters.dateTo) {
        query = query.lte('appointment_date', filters.dateTo);
      }
      
      const { data, error } = await query
        .order('appointment_date', { ascending: true })
        .order('appointment_time', { ascending: true });
      
      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des rendez-vous:', error);
        throw error;
      }
      
      console.log(`‚úÖ ${data.length} rendez-vous r√©cup√©r√©s`);
      
      return {
        success: true,
        data: data
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des rendez-vous:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration des rendez-vous'
      };
    }
  }

  /**
   * Mettre √† jour un rendez-vous
   */
  async updateAppointment(appointmentId, updates) {
    try {
      console.log('üìù Mise √† jour du rendez-vous:', appointmentId);
      
      // V√©rifier l'authentification
      if (!authService.isAuthenticated()) {
        throw new Error('Authentification requise');
      }
      
      // R√©cup√©rer le rendez-vous existant
      const { data: existingAppointment, error: fetchError } = await supabaseClient
        .from('appointments')
        .select('*')
        .eq('id', appointmentId)
        .single();
      
      if (fetchError) {
        throw new Error('Rendez-vous non trouv√©');
      }
      
      // V√©rifier les permissions
      const currentUser = authService.getCurrentUser();
      const userProfile = authService.getUserProfile();
      
      const canUpdate = userProfile?.role === 'employee' || 
                       currentUser?.id === existingAppointment.client_id;
      
      if (!canUpdate) {
        throw new Error('Permissions insuffisantes');
      }
      
      // Valider les mises √† jour
      if (updates.appointment_date || updates.appointment_time) {
        const availability = await this.checkAvailability(
          updates.appointment_date || existingAppointment.appointment_date,
          updates.appointment_time || existingAppointment.appointment_time,
          updates.employee_id || existingAppointment.employee_id,
          appointmentId // Exclure le rendez-vous actuel
        );
        
        if (!availability.available) {
          throw new Error('Le nouveau cr√©neau n\'est pas disponible');
        }
      }
      
      // Pr√©parer les donn√©es de mise √† jour
      const updateData = {
        ...updates,
        updated_at: new Date().toISOString()
      };
      
      // Effectuer la mise √† jour
      const { data, error } = await supabaseClient
        .from('appointments')
        .update(updateData)
        .eq('id', appointmentId)
        .select(`
          *,
          client:profiles!appointments_client_id_fkey(full_name, email, phone),
          employee:profiles!appointments_employee_id_fkey(full_name, email)
        `)
        .single();
      
      if (error) {
        console.error('‚ùå Erreur lors de la mise √† jour:', error);
        throw error;
      }
      
      console.log('‚úÖ Rendez-vous mis √† jour avec succ√®s');
      
      // Envoyer une notification
      await this.sendAppointmentNotification(data, 'updated');
      
      return {
        success: true,
        data: data,
        message: 'Rendez-vous mis √† jour avec succ√®s!'
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la mise √† jour:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la mise √† jour du rendez-vous'
      };
    }
  }

  /**
   * Annuler un rendez-vous
   */
  async cancelAppointment(appointmentId, reason = null) {
    try {
      console.log('‚ùå Annulation du rendez-vous:', appointmentId);
      
      const result = await this.updateAppointment(appointmentId, {
        status: 'cancelled',
        cancellation_reason: reason,
        cancelled_at: new Date().toISOString()
      });
      
      if (result.success) {
        await this.sendAppointmentNotification(result.data, 'cancelled');
        result.message = 'Rendez-vous annul√© avec succ√®s!';
      }
      
      return result;
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'annulation:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de l\'annulation du rendez-vous'
      };
    }
  }

  /**
   * V√©rifier la disponibilit√© d'un cr√©neau
   */
  async checkAvailability(date, time, employeeId, excludeAppointmentId = null) {
    try {
      console.log('üîç V√©rification de disponibilit√©:', { date, time, employeeId });
      
      // Validation des param√®tres
      if (!date || !time || !employeeId) {
        throw new Error('Date, heure et employ√© requis');
      }
      
      // V√©rifier que la date n'est pas dans le pass√©
      const appointmentDate = new Date(date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (appointmentDate < today) {
        return {
          available: false,
          reason: 'Impossible de prendre un rendez-vous dans le pass√©'
        };
      }
      
      // V√©rifier les heures d'ouverture
      if (!this.availableTimeSlots.includes(time)) {
        return {
          available: false,
          reason: 'Cr√©neau horaire non disponible'
        };
      }
      
      // V√©rifier les conflits dans la base de donn√©es
      let query = supabaseClient
        .from('appointments')
        .select('id')
        .eq('appointment_date', date)
        .eq('appointment_time', time)
        .eq('employee_id', employeeId)
        .neq('status', 'cancelled');
      
      if (excludeAppointmentId) {
        query = query.neq('id', excludeAppointmentId);
      }
      
      const { data, error } = await query;
      
      if (error) {
        console.error('‚ùå Erreur lors de la v√©rification:', error);
        throw error;
      }
      
      const isAvailable = data.length === 0;
      
      console.log('‚úÖ Disponibilit√© v√©rifi√©e:', isAvailable);
      
      return {
        available: isAvailable,
        reason: isAvailable ? null : 'Cr√©neau d√©j√† r√©serv√©'
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la v√©rification de disponibilit√©:', error);
      return {
        available: false,
        reason: 'Erreur lors de la v√©rification'
      };
    }
  }

  /**
   * R√©cup√©rer les employ√©s disponibles
   */
  async getAvailableEmployees() {
    try {
      console.log('üë• R√©cup√©ration des employ√©s disponibles...');
      
      const { data, error } = await supabaseClient
        .from('profiles')
        .select('id, full_name, email, specialties')
        .eq('role', 'employee')
        .eq('is_active', true)
        .order('full_name');
      
      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des employ√©s:', error);
        throw error;
      }
      
      console.log(`‚úÖ ${data.length} employ√©s r√©cup√©r√©s`);
      
      return {
        success: true,
        data: data
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des employ√©s:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration des employ√©s'
      };
    }
  }

  /**
   * R√©cup√©rer les cr√©neaux disponibles pour une date et un employ√©
   */
  async getAvailableSlots(date, employeeId) {
    try {
      console.log('üïê R√©cup√©ration des cr√©neaux disponibles:', { date, employeeId });
      
      // R√©cup√©rer les rendez-vous existants pour cette date et cet employ√©
      const { data: existingAppointments, error } = await supabaseClient
        .from('appointments')
        .select('appointment_time')
        .eq('appointment_date', date)
        .eq('employee_id', employeeId)
        .neq('status', 'cancelled');
      
      if (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des cr√©neaux:', error);
        throw error;
      }
      
      // Filtrer les cr√©neaux disponibles
      const bookedTimes = existingAppointments.map(apt => apt.appointment_time);
      const availableSlots = this.availableTimeSlots.filter(slot => !bookedTimes.includes(slot));
      
      console.log(`‚úÖ ${availableSlots.length} cr√©neaux disponibles`);
      
      return {
        success: true,
        data: availableSlots
      };
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des cr√©neaux:', error);
      return {
        success: false,
        error: error.message || 'Erreur lors de la r√©cup√©ration des cr√©neaux'
      };
    }
  }

  /**
   * Validation des donn√©es de rendez-vous
   */
  validateAppointmentData(data) {
    const errors = [];
    
    // Validation date
    if (!data.date) {
      errors.push('Date requise');
    } else {
      const appointmentDate = new Date(data.date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (appointmentDate < today) {
        errors.push('La date ne peut pas √™tre dans le pass√©');
      }
    }
    
    // Validation heure
    if (!data.time) {
      errors.push('Heure requise');
    } else if (!this.availableTimeSlots.includes(data.time)) {
      errors.push('Cr√©neau horaire invalide');
    }
    
    // Validation type
    if (!data.type) {
      errors.push('Type de rendez-vous requis');
    } else if (!this.appointmentTypes.find(t => t.id === data.type)) {
      errors.push('Type de rendez-vous invalide');
    }
    
    // Validation employ√©
    if (!data.employee_id) {
      errors.push('Employ√© requis');
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Obtenir la dur√©e d'un type de rendez-vous
   */
  getAppointmentDuration(type) {
    const appointmentType = this.appointmentTypes.find(t => t.id === type);
    return appointmentType ? appointmentType.duration : 60;
  }

  /**
   * Envoyer une notification de rendez-vous (placeholder)
   */
  async sendAppointmentNotification(appointment, action) {
    try {
      console.log(`üìß Notification de rendez-vous (${action}):`, appointment.id);
      // Ici, vous pourriez impl√©menter l'envoi d'emails ou de notifications push
      // Pour l'instant, on log simplement l'action
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'envoi de notification:', error);
    }
  }

  /**
   * Obtenir les types de rendez-vous disponibles
   */
  getAppointmentTypes() {
    return this.appointmentTypes;
  }

  /**
   * Obtenir les cr√©neaux horaires disponibles
   */
  getTimeSlots() {
    return this.availableTimeSlots;
  }
}

// Cr√©er une instance globale du service de rendez-vous
window.appointmentsService = new AppointmentsService();

console.log('üìÖ Service de rendez-vous charg√©');