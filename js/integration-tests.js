// Tests d'int√©gration pour diagnostiquer les probl√®mes de redirection et de navigation
// Ce fichier contient tous les tests n√©cessaires pour identifier et corriger les probl√®mes

class IntegrationTests {
    constructor() {
        this.results = [];
        this.logContainer = document.getElementById('diagnostic-logs');
    }

    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry log-${type}`;
        logEntry.innerHTML = `[${timestamp}] ${message}`;
        
        if (this.logContainer) {
            this.logContainer.appendChild(logEntry);
            this.logContainer.scrollTop = this.logContainer.scrollHeight;
        }
        
        console.log(`[${type.toUpperCase()}] ${message}`);
    }

    addResult(name, success, details) {
        this.results.push({ name, success, details, timestamp: new Date() });
    }

    // Test de navigation g√©n√©rale
    async testNavigation() {
        this.log('üîç Test de navigation g√©n√©rale...', 'info');
        
        try {
            // V√©rifier que tous les liens de navigation existent
            const navLinks = document.querySelectorAll('.nav-link');
            let validLinks = 0;
            
            navLinks.forEach(link => {
                const href = link.getAttribute('href');
                if (href && href !== '#') {
                    validLinks++;
                }
            });
            
            if (validLinks > 0) {
                this.log(`‚úÖ ${validLinks} liens de navigation valides trouv√©s`, 'success');
                this.addResult('Navigation Links', true, `${validLinks} liens valides`);
            } else {
                this.log('‚ùå Aucun lien de navigation valide trouv√©', 'error');
                this.addResult('Navigation Links', false, 'Aucun lien valide');
            }
            
            // V√©rifier le menu mobile
            const navToggle = document.getElementById('nav-toggle');
            const navMenu = document.getElementById('nav-menu');
            
            if (navToggle && navMenu) {
                this.log('‚úÖ Menu mobile configur√© correctement', 'success');
                this.addResult('Mobile Menu', true, 'Menu mobile fonctionnel');
            } else {
                this.log('‚ùå Menu mobile manquant ou mal configur√©', 'error');
                this.addResult('Mobile Menu', false, 'Menu mobile manquant');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test de navigation: ${error.message}`, 'error');
            this.addResult('Navigation', false, error.message);
        }
    }

    // Test des redirections d'authentification
    async testAuthRedirects() {
        this.log('üîê Test des redirections d\'authentification...', 'info');
        
        try {
            // V√©rifier les pages prot√©g√©es
            const protectedPages = ['profile.html', 'messaging.html', 'confirmation.html', 'rendez-vous.html'];
            const currentPage = window.location.pathname.split('/').pop();
            
            if (protectedPages.includes(currentPage)) {
                this.log(`‚ö†Ô∏è Page prot√©g√©e d√©tect√©e: ${currentPage}`, 'warning');
                
                // V√©rifier si l'utilisateur est authentifi√©
                if (typeof window.authManager !== 'undefined') {
                    const isAuth = await window.authManager.isAuthenticated();
                    if (isAuth) {
                        this.log('‚úÖ Utilisateur authentifi√© sur page prot√©g√©e', 'success');
                        this.addResult('Auth Protection', true, 'Utilisateur authentifi√©');
                    } else {
                        this.log('‚ùå Utilisateur non authentifi√© sur page prot√©g√©e', 'error');
                        this.addResult('Auth Protection', false, 'Redirection n√©cessaire');
                    }
                } else {
                    this.log('‚ùå Gestionnaire d\'authentification non disponible', 'error');
                    this.addResult('Auth Protection', false, 'AuthManager manquant');
                }
            } else {
                this.log('‚ÑπÔ∏è Page publique d√©tect√©e', 'info');
                this.addResult('Auth Protection', true, 'Page publique');
            }
            
            // V√©rifier les boutons d'authentification
            const authButtons = document.querySelectorAll('.nav-cta, #auth-link');
            if (authButtons.length > 0) {
                this.log(`‚úÖ ${authButtons.length} bouton(s) d'authentification trouv√©(s)`, 'success');
                this.addResult('Auth Buttons', true, `${authButtons.length} boutons`);
            } else {
                this.log('‚ùå Aucun bouton d\'authentification trouv√©', 'error');
                this.addResult('Auth Buttons', false, 'Boutons manquants');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test d'authentification: ${error.message}`, 'error');
            this.addResult('Auth Redirects', false, error.message);
        }
    }

    // Test du flow de rendez-vous
    async testRendezVousFlow() {
        this.log('üìÖ Test du flow de rendez-vous...', 'info');
        
        try {
            // V√©rifier si le gestionnaire de rendez-vous est disponible
            if (typeof window.rdvManager !== 'undefined') {
                this.log('‚úÖ Gestionnaire de rendez-vous disponible', 'success');
                this.addResult('RDV Manager', true, 'Manager disponible');
                
                // V√©rifier les fonctions de navigation
                if (typeof nextStep === 'function' && typeof prevStep === 'function') {
                    this.log('‚úÖ Fonctions de navigation disponibles', 'success');
                    this.addResult('RDV Navigation', true, 'Fonctions nextStep/prevStep');
                } else {
                    this.log('‚ùå Fonctions de navigation manquantes', 'error');
                    this.addResult('RDV Navigation', false, 'Fonctions manquantes');
                }
                
                // V√©rifier les s√©lecteurs de domaine
                const domainCards = document.querySelectorAll('.domaine-card');
                if (domainCards.length > 0) {
                    this.log(`‚úÖ ${domainCards.length} cartes de domaine trouv√©es`, 'success');
                    this.addResult('Domain Selection', true, `${domainCards.length} domaines`);
                } else {
                    this.log('‚ùå Aucune carte de domaine trouv√©e', 'error');
                    this.addResult('Domain Selection', false, 'Cartes manquantes');
                }
                
                // V√©rifier les boutons de type de consultation
                const typeButtons = document.querySelectorAll('.type-btn');
                if (typeButtons.length > 0) {
                    this.log(`‚úÖ ${typeButtons.length} bouton(s) de type trouv√©(s)`, 'success');
                    this.addResult('Type Selection', true, `${typeButtons.length} types`);
                } else {
                    this.log('‚ùå Aucun bouton de type trouv√©', 'error');
                    this.addResult('Type Selection', false, 'Boutons manquants');
                }
                
            } else {
                this.log('‚ùå Gestionnaire de rendez-vous non disponible', 'error');
                this.addResult('RDV Manager', false, 'Manager manquant');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test de rendez-vous: ${error.message}`, 'error');
            this.addResult('RDV Flow', false, error.message);
        }
    }

    // Test de tous les liens
    async testAllLinks() {
        this.log('üîó Test de tous les liens...', 'info');
        
        try {
            const links = document.querySelectorAll('a[href]');
            let validLinks = 0;
            let invalidLinks = 0;
            
            links.forEach(link => {
                const href = link.getAttribute('href');
                if (href && href !== '#' && !href.startsWith('javascript:')) {
                    validLinks++;
                } else {
                    invalidLinks++;
                }
            });
            
            this.log(`‚úÖ ${validLinks} liens valides trouv√©s`, 'success');
            if (invalidLinks > 0) {
                this.log(`‚ö†Ô∏è ${invalidLinks} liens invalides trouv√©s`, 'warning');
            }
            
            this.addResult('All Links', true, `${validLinks} valides, ${invalidLinks} invalides`);
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test des liens: ${error.message}`, 'error');
            this.addResult('All Links', false, error.message);
        }
    }

    // Test des fonctions d'authentification
    async testAuthFunctions() {
        this.log('üîê Test des fonctions d\'authentification...', 'info');
        
        try {
            // V√©rifier Supabase
            if (typeof window.supabase !== 'undefined') {
                this.log('‚úÖ Client Supabase disponible', 'success');
                this.addResult('Supabase Client', true, 'Client disponible');
                
                // Tester la connexion
                try {
                    const { data, error } = await window.supabase.auth.getSession();
                    if (error) {
                        this.log(`‚ö†Ô∏è Erreur de session Supabase: ${error.message}`, 'warning');
                        this.addResult('Supabase Session', false, error.message);
                    } else {
                        this.log('‚úÖ Session Supabase fonctionnelle', 'success');
                        this.addResult('Supabase Session', true, 'Session OK');
                    }
                } catch (sessionError) {
                    this.log(`‚ùå Erreur de session: ${sessionError.message}`, 'error');
                    this.addResult('Supabase Session', false, sessionError.message);
                }
                
            } else {
                this.log('‚ùå Client Supabase non disponible', 'error');
                this.addResult('Supabase Client', false, 'Client manquant');
            }
            
            // V√©rifier les fonctions d'authentification
            if (typeof window.authManager !== 'undefined') {
                this.log('‚úÖ Gestionnaire d\'authentification disponible', 'success');
                this.addResult('Auth Manager', true, 'Manager disponible');
                
                // Tester les m√©thodes principales
                const methods = ['isAuthenticated', 'login', 'logout', 'redirectToLogin'];
                let availableMethods = 0;
                
                methods.forEach(method => {
                    if (typeof window.authManager[method] === 'function') {
                        availableMethods++;
                    }
                });
                
                if (availableMethods === methods.length) {
                    this.log('‚úÖ Toutes les m√©thodes d\'authentification disponibles', 'success');
                    this.addResult('Auth Methods', true, `${availableMethods}/${methods.length} m√©thodes`);
                } else {
                    this.log(`‚ö†Ô∏è ${availableMethods}/${methods.length} m√©thodes d'authentification disponibles`, 'warning');
                    this.addResult('Auth Methods', false, `${availableMethods}/${methods.length} m√©thodes`);
                }
                
            } else {
                this.log('‚ùå Gestionnaire d\'authentification non disponible', 'error');
                this.addResult('Auth Manager', false, 'Manager manquant');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test d'authentification: ${error.message}`, 'error');
            this.addResult('Auth Functions', false, error.message);
        }
    }

    // Test de la gestion de session
    async testSessionManagement() {
        this.log('üíæ Test de la gestion de session...', 'info');
        
        try {
            // V√©rifier le localStorage
            const sessionKeys = ['token', 'isAuthenticated', 'user'];
            let validKeys = 0;
            
            sessionKeys.forEach(key => {
                if (localStorage.getItem(key) !== null) {
                    validKeys++;
                }
            });
            
            if (validKeys > 0) {
                this.log(`‚úÖ ${validKeys} cl√©(s) de session trouv√©e(s)`, 'success');
                this.addResult('Session Storage', true, `${validKeys} cl√©s`);
            } else {
                this.log('‚ÑπÔ∏è Aucune cl√© de session trouv√©e (normal si non connect√©)', 'info');
                this.addResult('Session Storage', true, 'Aucune cl√© (normal)');
            }
            
            // V√©rifier la synchronisation entre onglets
            if (typeof window.addEventListener === 'function') {
                this.log('‚úÖ √âcouteur d\'√©v√©nements de stockage disponible', 'success');
                this.addResult('Session Sync', true, 'Synchronisation disponible');
            } else {
                this.log('‚ùå √âcouteur d\'√©v√©nements de stockage non disponible', 'error');
                this.addResult('Session Sync', false, 'Synchronisation manquante');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test de session: ${error.message}`, 'error');
            this.addResult('Session Management', false, error.message);
        }
    }

    // Test des fonctions de rendez-vous
    async testRendezVousFunctions() {
        this.log('üìÖ Test des fonctions de rendez-vous...', 'info');
        
        try {
            if (typeof window.rdvManager !== 'undefined') {
                // V√©rifier les propri√©t√©s principales
                const properties = ['selectedDomain', 'selectedType', 'selectedDate', 'selectedTime'];
                let validProperties = 0;
                
                properties.forEach(prop => {
                    if (window.rdvManager.hasOwnProperty(prop)) {
                        validProperties++;
                    }
                });
                
                if (validProperties === properties.length) {
                    this.log('‚úÖ Toutes les propri√©t√©s du gestionnaire disponibles', 'success');
                    this.addResult('RDV Properties', true, `${validProperties}/${properties.length} propri√©t√©s`);
                } else {
                    this.log(`‚ö†Ô∏è ${validProperties}/${properties.length} propri√©t√©s disponibles`, 'warning');
                    this.addResult('RDV Properties', false, `${validProperties}/${properties.length} propri√©t√©s`);
                }
                
                // V√©rifier les m√©thodes principales
                const methods = ['selectDomain', 'selectConsultationType', 'selectDate', 'selectTimeSlot'];
                let availableMethods = 0;
                
                methods.forEach(method => {
                    if (typeof window.rdvManager[method] === 'function') {
                        availableMethods++;
                    }
                });
                
                if (availableMethods === methods.length) {
                    this.log('‚úÖ Toutes les m√©thodes de rendez-vous disponibles', 'success');
                    this.addResult('RDV Methods', true, `${availableMethods}/${methods.length} m√©thodes`);
                } else {
                    this.log(`‚ö†Ô∏è ${availableMethods}/${methods.length} m√©thodes disponibles`, 'warning');
                    this.addResult('RDV Methods', false, `${availableMethods}/${methods.length} m√©thodes`);
                }
                
            } else {
                this.log('‚ùå Gestionnaire de rendez-vous non disponible', 'error');
                this.addResult('RDV Functions', false, 'Manager manquant');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test des fonctions de rendez-vous: ${error.message}`, 'error');
            this.addResult('RDV Functions', false, error.message);
        }
    }

    // Test de l'int√©gration calendrier
    async testCalendarIntegration() {
        this.log('üìÖ Test de l\'int√©gration calendrier...', 'info');
        
        try {
            // V√©rifier les √©l√©ments du calendrier
            const calendarElements = ['#calendar', '#time-slots', '.calendar-container'];
            let validElements = 0;
            
            calendarElements.forEach(selector => {
                if (document.querySelector(selector)) {
                    validElements++;
                }
            });
            
            if (validElements > 0) {
                this.log(`‚úÖ ${validElements} √©l√©ment(s) de calendrier trouv√©(s)`, 'success');
                this.addResult('Calendar Elements', true, `${validElements} √©l√©ments`);
            } else {
                this.log('‚ùå Aucun √©l√©ment de calendrier trouv√©', 'error');
                this.addResult('Calendar Elements', false, '√âl√©ments manquants');
            }
            
            // V√©rifier les cr√©neaux horaires
            const timeSlots = document.querySelectorAll('.time-slot');
            if (timeSlots.length > 0) {
                this.log(`‚úÖ ${timeSlots.length} cr√©neau(x) horaire(s) trouv√©(s)`, 'success');
                this.addResult('Time Slots', true, `${timeSlots.length} cr√©neaux`);
            } else {
                this.log('‚ÑπÔ∏è Aucun cr√©neau horaire affich√© (normal si pas de date s√©lectionn√©e)', 'info');
                this.addResult('Time Slots', true, 'Aucun cr√©neau (normal)');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test du calendrier: ${error.message}`, 'error');
            this.addResult('Calendar Integration', false, error.message);
        }
    }

    // Test de l'int√©gration paiement
    async testPaymentIntegration() {
        this.log('üí≥ Test de l\'int√©gration paiement...', 'info');
        
        try {
            // V√©rifier Stripe
            if (typeof Stripe !== 'undefined') {
                this.log('‚úÖ Stripe disponible', 'success');
                this.addResult('Stripe Integration', true, 'Stripe disponible');
                
                // V√©rifier les √©l√©ments de paiement
                const paymentElements = ['#card-element', '#card-errors', '.payment-section'];
                let validElements = 0;
                
                paymentElements.forEach(selector => {
                    if (document.querySelector(selector)) {
                        validElements++;
                    }
                });
                
                if (validElements > 0) {
                    this.log(`‚úÖ ${validElements} √©l√©ment(s) de paiement trouv√©(s)`, 'success');
                    this.addResult('Payment Elements', true, `${validElements} √©l√©ments`);
                } else {
                    this.log('‚ÑπÔ∏è Aucun √©l√©ment de paiement trouv√© (normal si pas sur la page de paiement)', 'info');
                    this.addResult('Payment Elements', true, 'Aucun √©l√©ment (normal)');
                }
                
            } else {
                this.log('‚ùå Stripe non disponible', 'error');
                this.addResult('Stripe Integration', false, 'Stripe manquant');
            }
            
        } catch (error) {
            this.log(`‚ùå Erreur lors du test de paiement: ${error.message}`, 'error');
            this.addResult('Payment Integration', false, error.message);
        }
    }

    // G√©n√©rer un rapport complet
    generateReport() {
        const totalTests = this.results.length;
        const passedTests = this.results.filter(r => r.success).length;
        const failedTests = totalTests - passedTests;
        const successRate = totalTests > 0 ? ((passedTests / totalTests) * 100).toFixed(1) : 0;
        
        this.log('üìä RAPPORT COMPLET', 'info');
        this.log(`Total des tests: ${totalTests}`, 'info');
        this.log(`Tests r√©ussis: ${passedTests}`, 'success');
        this.log(`Tests √©chou√©s: ${failedTests}`, failedTests > 0 ? 'error' : 'info');
        this.log(`Taux de r√©ussite: ${successRate}%`, successRate >= 80 ? 'success' : 'warning');
        
        // Afficher les d√©tails des tests √©chou√©s
        if (failedTests > 0) {
            this.log('‚ùå TESTS √âCHOU√âS:', 'error');
            this.results.filter(r => !r.success).forEach(result => {
                this.log(`- ${result.name}: ${result.details}`, 'error');
            });
        }
        
        return {
            total: totalTests,
            passed: passedTests,
            failed: failedTests,
            successRate: parseFloat(successRate),
            results: this.results
        };
    }
}

// Initialiser les tests
const integrationTests = new IntegrationTests();

// Fonctions globales pour les boutons de test
window.testNavigation = () => integrationTests.testNavigation();
window.testAuthRedirects = () => integrationTests.testAuthRedirects();
window.testRendezVousFlow = () => integrationTests.testRendezVousFlow();
window.testAllLinks = () => integrationTests.testAllLinks();
window.testAuthFunctions = () => integrationTests.testAuthFunctions();
window.testSessionManagement = () => integrationTests.testSessionManagement();
window.testRendezVousFunctions = () => integrationTests.testRendezVousFunctions();
window.testCalendarIntegration = () => integrationTests.testCalendarIntegration();
window.testPaymentIntegration = () => integrationTests.testPaymentIntegration();

// Test automatique au chargement de la page
document.addEventListener('DOMContentLoaded', () => {
    integrationTests.log('üöÄ Tests d\'int√©gration initialis√©s', 'info');
    
    // Ex√©cuter les tests de base automatiquement
    setTimeout(() => {
        integrationTests.testNavigation();
        integrationTests.testAuthRedirects();
        integrationTests.testRendezVousFlow();
    }, 1000);
});

console.log('Tests d\'int√©gration charg√©s');